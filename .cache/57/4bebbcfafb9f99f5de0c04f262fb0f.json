{"id":"node_modules/rxjs-compat/operator/repeatWhen.js","dependencies":[{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/repeatWhen.js.map","includedInParent":true,"mtime":1558549199495},{"name":"/Users/haimagami/Desktop/personal-site/package.json","includedInParent":true,"mtime":1558549229172},{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/package.json","includedInParent":true,"mtime":1558549199495},{"name":"rxjs/operators","loc":{"line":3,"column":26},"parent":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/repeatWhen.js","resolved":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs/_esm5/operators/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return operators_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n","map":{"version":3,"file":"repeatWhen.js","sources":["../src/compat/operator/repeatWhen.ts"],"names":[],"mappings":";;AACA,4CAA2D;AAE3D;;;;;;;;;;;;;GAaG;AACH,SAAgB,UAAU,CAAyB,QAA6D;IAC9G,OAAO,sBAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAkB,CAAC;AACtD,CAAC;AAFD,gCAEC","sourcesContent":[null]}},"hash":"2bda02a5c62122619362a489ddca42a4","cacheData":{"env":{}}}