{"id":"node_modules/rxjs-compat/operator/throttleTime.js","dependencies":[{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/throttleTime.js.map","includedInParent":true,"mtime":1558549199495},{"name":"/Users/haimagami/Desktop/personal-site/package.json","includedInParent":true,"mtime":1558549229172},{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/package.json","includedInParent":true,"mtime":1558549199495},{"name":"rxjs","loc":{"line":3,"column":21},"parent":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/throttleTime.js","resolved":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs/_esm5/index.js"},{"name":"rxjs/internal-compatibility","loc":{"line":4,"column":39},"parent":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/throttleTime.js","resolved":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs/_esm5/internal-compatibility/index.js"},{"name":"rxjs/operators","loc":{"line":5,"column":26},"parent":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/throttleTime.js","resolved":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs/_esm5/operators/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nvar internal_compatibility_1 = require(\"rxjs/internal-compatibility\");\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=asyncScheduler] The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = rxjs_1.asyncScheduler; }\n    if (config === void 0) { config = internal_compatibility_1.defaultThrottleConfig; }\n    return operators_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n","map":{"version":3,"file":"throttleTime.js","sources":["../src/compat/operator/throttleTime.ts"],"names":[],"mappings":";;AAAA,6BAAiE;AACjE,sEAAoF;AACpF,4CAA6D;AAE7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH,SAAgB,YAAY,CACI,QAAgB,EAChB,SAAyC,EACzC,MAA8C;IAD9C,0BAAA,EAAA,YAA2B,qBAAc;IACzC,uBAAA,EAAA,SAAyB,8CAAqB;IAC5E,OAAO,wBAAW,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,IAAI,CAAkB,CAAC;AACzE,CAAC;AALD,oCAKC","sourcesContent":[null]}},"hash":"b1a53d63a7867037f6b36e4ee2b226c7","cacheData":{"env":{}}}