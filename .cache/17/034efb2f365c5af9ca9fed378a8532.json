{"id":"node_modules/rxjs-compat/operator/repeat.js","dependencies":[{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/repeat.js.map","includedInParent":true,"mtime":1558549199495},{"name":"/Users/haimagami/Desktop/personal-site/package.json","includedInParent":true,"mtime":1558549229172},{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/package.json","includedInParent":true,"mtime":1558549199495},{"name":"rxjs/operators","loc":{"line":3,"column":26},"parent":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/repeat.js","resolved":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs/_esm5/operators/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return operators_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n","map":{"version":3,"file":"repeat.js","sources":["../src/compat/operator/repeat.ts"],"names":[],"mappings":";;AAEA,4CAAuD;AAEvD;;;;;;;;;;;GAWG;AACH,SAAgB,MAAM,CAAyB,KAAkB;IAAlB,sBAAA,EAAA,SAAiB,CAAC;IAC/D,OAAO,kBAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAkB,CAAC;AACnD,CAAC;AAFD,wBAEC","sourcesContent":[null]}},"hash":"40d65007172b28c22cdaef46a09f2547","cacheData":{"env":{}}}