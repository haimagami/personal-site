{"id":"node_modules/rxjs-compat/operator/delay.js","dependencies":[{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/delay.js.map","includedInParent":true,"mtime":1558549199495},{"name":"/Users/haimagami/Desktop/personal-site/package.json","includedInParent":true,"mtime":1558549229172},{"name":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/package.json","includedInParent":true,"mtime":1558549199495},{"name":"rxjs","loc":{"line":3,"column":21},"parent":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/delay.js","resolved":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs/_esm5/index.js"},{"name":"rxjs/operators","loc":{"line":4,"column":26},"parent":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs-compat/operator/delay.js","resolved":"/Users/haimagami/Desktop/personal-site/node_modules/rxjs/_esm5/operators/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=asyncScheduler] The SchedulerLike to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = rxjs_1.asyncScheduler; }\n    return operators_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n","map":{"version":3,"file":"delay.js","sources":["../src/compat/operator/delay.ts"],"names":[],"mappings":";;AAAA,6BAAiE;AACjE,4CAAsD;AAEtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH,SAAgB,KAAK,CAAyB,KAAkB,EACvC,SAAyC;IAAzC,0BAAA,EAAA,YAA2B,qBAAc;IAChE,OAAO,iBAAW,CAAI,KAAK,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;AAChD,CAAC;AAHD,sBAGC","sourcesContent":[null]}},"hash":"6ca8b026e7f32b232c484228411a8629","cacheData":{"env":{}}}